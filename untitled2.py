# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xKDHTAD_Tau8VDqRSRx8Pl4n_11-F9NO
"""

import gradio as gr
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
import seaborn as sns

# Load Titanic dataset
df = sns.load_dataset("titanic")

# Select relevant features & drop missing values
df = df[['sex', 'age', 'fare', 'pclass', 'embarked', 'survived']].dropna()

# Encode categorical variables
sex_encoder = {'female': 0, 'male': 1}
embarked_encoder = {'C': 0, 'Q': 1, 'S': 2}

df['sex'] = df['sex'].map(sex_encoder)
df['embarked'] = df['embarked'].map(embarked_encoder)

# Define features & target
X = df[['sex', 'age', 'fare', 'pclass', 'embarked']]
y = df['survived']  # 0 = Did not survive, 1 = Survived

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Define the prediction function
def predict_survival(sex, age, fare, pclass, embarked):
    try:
        # Convert categorical inputs to numerical values
        sex_dict = {"female": 0, "male": 1}
        embarked_dict = {"C": 0, "Q": 1, "S": 2}

        sex = sex_dict.get(sex, 0)  # Default to 0 if not found
        embarked = embarked_dict.get(embarked, 2)  # Default to "S"

        # Convert other inputs to float
        age = float(age)
        fare = float(fare)
        pclass = float(pclass)

        # Prepare input for model
        input_data = np.array([[sex, age, fare, pclass, embarked]])
        scaled_data = scaler.transform(input_data)  # Standardize

        # Get prediction
        prediction = model.predict(scaled_data)
        return "Survived" if prediction[0] == 1 else "Did Not Survive"

    except Exception as e:
        return f"Error: {e}"  # Display actual error message in UI


# Gradio inputs (Fixed categorical mapping)
input_features = [
    gr.Radio(choices=['female', 'male'], label="Sex"),
    gr.Slider(minimum=1, maximum=80, value=30, label="Age"),
    gr.Slider(minimum=0, maximum=500, value=50, label="Fare Paid"),
    gr.Radio(choices=[1, 2, 3], label="Passenger Class"),
    gr.Radio(choices=['C', 'Q', 'S'], label="Embarked From"),
]

# Output display
output = gr.Textbox()

# Create Gradio interface
interface = gr.Interface(
    fn=predict_survival,
    inputs=input_features,
    outputs=output,
    title="ðŸš¢ Titanic Survival Prediction",
    description="Enter passenger details to predict if they survived the Titanic disaster."
)

# Launch Gradio app
interface.launch()