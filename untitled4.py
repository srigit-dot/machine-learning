# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SscGfdSf9y_OkhyiZDy-ca75qPYCyM8p
"""

!pip install gradio
import gradio as gr
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs

# Generate a sample dataset with 3 clusters
X, _ = make_blobs(n_samples=300, centers=3, cluster_std=1.2, random_state=42)

# Train KMeans model with 3 clusters
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)

# Prediction function
def predict_cluster(feature1, feature2):
    point = np.array([[feature1, feature2]])
    cluster = kmeans.predict(point)[0]

    # Plot clusters and the new point
    plt.figure(figsize=(6, 4))
    plt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_, cmap='viridis', alpha=0.6)
    plt.scatter(point[:, 0], point[:, 1], c='red', marker='X', s=200, label="New Point")
    plt.title(f"Cluster Prediction: Cluster {cluster}")
    plt.legend()
    plt.show()

    return f"Predicted Cluster: {cluster}"

# Gradio UI
interface = gr.Interface(
    fn=predict_cluster,
    inputs=[
        gr.Slider(-10, 10, step=0.1, label="Feature 1"),
        gr.Slider(-10, 10, step=0.1, label="Feature 2")
    ],
    outputs="text",
    title="K-Means Clustering Predictor",
    description="Enter two numerical values to predict which cluster the point belongs to."
)

interface.launch()