# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ELFcY7tbJd-9p4L71n1pZR1tny8X4dD4
"""

import gradio as gr
import numpy as np
from sklearn.datasets import fetch_california_housing
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load California housing dataset
california_housing = fetch_california_housing()
X = california_housing.data
y = california_housing.target

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Define prediction function
def predict_house_price(medinc, houseage, averooms, bedrooms, population, aveoccup, latitude, longitude):
    features = np.array([[medinc, houseage, averooms, bedrooms, population, aveoccup, latitude, longitude]])
    scaled_features = scaler.transform(features)  # Standardize input
    prediction = model.predict(scaled_features)
    return f"Predicted House Price: ${prediction[0] * 1000:.2f}"  # Scale back price

# Create Gradio Interface with proper features
input_features = [
    gr.Slider(minimum=0, maximum=15, value=6, label="MedInc (Median Income)"),
    gr.Slider(minimum=0, maximum=50, value=10, label="HouseAge (Median House Age)"),
    gr.Slider(minimum=0, maximum=10, value=5, label="AveRooms (Avg Rooms per House)"),
    gr.Slider(minimum=0, maximum=10, value=2, label="AveBedrms (Avg Bedrooms per House)"),
    gr.Slider(minimum=0, maximum=5000, value=1000, label="Population"),
    gr.Slider(minimum=0, maximum=10, value=4, label="AveOccup (Avg Occupancy)"),
    gr.Slider(minimum=32, maximum=42, value=37, label="Latitude (Geographic Latitude)"),
    gr.Slider(minimum=-125, maximum=-114, value=-120, label="Longitude (Geographic Longitude)"),
]

# Output display
output = gr.Textbox()

# Create Gradio interface
interface = gr.Interface(
    fn=predict_house_price,
    inputs=input_features,
    outputs=output,
    title="California House Price Prediction",
    description="Predict house prices in California using a linear regression model based on factors such as income, age, rooms, and location."
)

# Launch the interface
interface.launch()